import java.nio.file.Files

buildscript {
    repositories {
        mavenCentral()
        maven {
            name "central snapshots"
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }

    dependencies {
        classpath group: 'com.techshroom', name: 'Aversion', version: '3.0.0'
    }
}
plugins {
    id "com.github.hierynomus.license" version "0.13.1"
    id 'net.researchgate.release' version '2.5.0'
    id 'play'
}
apply plugin: 'aversion-util'
apply plugin: 'idea'

util {
    javaVersion = '1.8'
}
idea.project.languageLevel = util.javaVersion

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

repositories {
    mavenCentral()
    ivy {
        name "typesafe-ivy-release"
        url "https://repo.typesafe.com/typesafe/ivy-releases"
        layout "ivy"
    }
    maven {
        name "central snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    flatDir {
        def libExt = System.properties.'java.home' + "/lib/ext/"
        logger.info("Using $libExt for the extended JRE libraries dependency.")
        dirs libExt
    }
}

dependencies {
    play group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    play group: 'com.sparkjava', name: 'spark-core', version: '2.5.4'
    play group: 'com.techshroom', name: 'jsr305-plus', version: '0.0.1'
    play group: 'com.typesafe.play', name: "play-java_$scalaVersion", version: playVersion
    play group: 'com.typesafe.play', name: "play-logback_$scalaVersion", version: playVersion
    play group: 'org.mapdb', name: 'mapdb', version: '3.0.3'
    play group: 'com.google.guava', name: 'guava', version: '19.0'
    play group: 'ch.qos.logback', name: 'logback-core', version: '1.1.9'
    play group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.9'

    // require JavaFX for properties -- it should be available...
    play name: 'jfxrt'

//    play files('/Users/kenzietogami/.gradle/caches/3.3/workerMain/gradle-worker.jar')
//    play files(fileTree('/usr/local/Cellar/gradle/3.3/libexec/lib/'))

    playTest group: 'junit', name: 'junit', version: '4.12'
}
model {
    components {
        play {
            platform play: playVersion, scala: scalaVersion
        }
    }
}

license {
    ext {
        name = project.name
        organization = project.organization
        url = project.url
    }
    header = rootProject.file('HEADER.txt')
    ignoreFailures = false
    strictCheck = true
    include '**/*.java'
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

// Super exciting! We're doing ES6 transpilation!
model {
    components {
        play {
            binaries.all { binary ->
                tasks.create("transpilePlay${binary.name.capitalize()}Javascript", TranspileJavascript) { task ->
                    sourceDir = file("transpile-source/javascript")
                    def destDirBase = project.file("${buildDir}/play${binary.name.capitalize()}/transpiled")
                    destinationDir = new File(destDirBase, "javascript")

                    // Hook this task into the binary
                    binary.assets.addAssetDir destDirBase
                    binary.assets.builtBy task
                }
                tasks.create("transpilePlay${binary.name.capitalize()}Scss", TranspileSass) { task ->
                    sourceDir = file("transpile-source/scss")
                    def destDirBase = project.file("${buildDir}/play${binary.name.capitalize()}/transpiled")
                    destinationDir = new File(destDirBase, "stylesheets")

                    // Hook this task into the binary
                    binary.assets.addAssetDir destDirBase
                    binary.assets.builtBy task
                }
            }
        }
    }
}

class TranspileJavascript extends DefaultTask {
    {
        // we should redo when these change
        inputs.files("package.json", ".babelrc")
    }

    @InputDirectory
    File sourceDir

    @OutputDirectory
    File destinationDir

    @TaskAction
    void generateAssets() {
        project.exec {
            executable project.file("./node_modules/babel-cli/bin/babel.js")
            args '-d', destinationDir, sourceDir
        }
    }
}

class TranspileSass extends DefaultTask {
    @InputDirectory
    File sourceDir

    @OutputDirectory
    File destinationDir

    @TaskAction
    void generateAssets() {
        def cssMiddleman = Files.createTempDirectory("yt-mp3-css-middleman").toFile()
        project.exec {
            executable 'sass'
            args '--scss', '--sourcemap=none', '--update', "$sourceDir:$cssMiddleman"
        }
        project.exec {
            executable project.file("./node_modules/postcss-cli/bin/postcss")
            args = ['--use', 'autoprefixer', '--dir', destinationDir] + project.fileTree(cssMiddleman).files
        }
    }
}
