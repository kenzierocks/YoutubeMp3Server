import java.nio.file.Files

plugins {
    id 'com.github.johnrengelman.shadow' version '5.0.0'
    id 'net.researchgate.release' version '2.8.0'
    id 'com.techshroom.incise-blue' version '0.3.13'
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.0.7'
}

inciseBlue {
	util {
	    javaVersion = '12'
	}
    ide()
    license()
}

javafx {
    version = "12.0.1"
    modules = [ "javafx.base" ]
}

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
    compileOnly group: 'com.techshroom', name: 'jsr305-plus', version: '0.0.1'
    compile group: 'org.mapdb', name: 'mapdb', version: '3.0.5'
    compile group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion
    compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    compile group: 'com.techshroom.templar', name: 'templar-core', version: templarVersion
    compile group: 'com.techshroom.templar', name: 'templar-codec-jackson', version: templarVersion

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: project.jacksonVersion
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: project.jacksonVersion
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: project.jacksonVersion
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: project.jacksonVersion
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: project.jacksonVersion
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-guava', version: project.jacksonVersion

    compile group: 'org.apache.velocity', name: 'velocity-engine-core', version: '2.0'
    compile group: 'org.apache.tika', name: 'tika-core', version: '1.17'

    compile group: 'com.google.guava', name: 'guava', version: guavaVersion
    
    compileOnly group: 'com.google.auto.service', name: 'auto-service', version: '1.0-rc4'
    annotationProcessor group: 'com.google.auto.service', name: 'auto-service', version: '1.0-rc4'
    compileOnly group: 'com.google.auto.value', name: 'auto-value-annotations', version: '1.6.5'
    annotationProcessor group: 'com.google.auto.value', name: 'auto-value', version: '1.6.5'
    
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

jar {
    manifest {
        attributes("Main-Class": "com.techshroom.ytmp3.YoutubeMp3Server")
    }
}

assemble.dependsOn(shadowJar)

// Super exciting! We're doing ES6 transpilation!
ext.destDirBase = project.file("${buildDir}/transpiled")
tasks.create("transpileJavascript", TranspileJavascript) { task ->
    sourceDir = file("transpile-source/javascript")
    destinationDir = new File(project.destDirBase, "javascript")
}
tasks.create("transpileScss", TranspileSass) { task ->
    sourceDir = file("transpile-source/scss")
    destinationDir = new File(project.destDirBase, "stylesheets")
}
task transpileResources(dependsOn: [transpileJavascript, transpileScss]);

sourceSets.main {
    output.dir(project.destDirBase, builtBy: 'transpileResources')
}

class TranspileJavascript extends DefaultTask {
    {
        // we should redo when these change
        inputs.files("package.json", ".babelrc")
    }

    @InputDirectory
    File sourceDir

    @OutputDirectory
    File destinationDir

    @TaskAction
    void generateAssets() {
        project.exec {
            executable project.file("./node_modules/babel-cli/bin/babel.js")
            args '-d', destinationDir, sourceDir
        }
    }
}

class TranspileSass extends DefaultTask {
    @InputDirectory
    File sourceDir

    @OutputDirectory
    File destinationDir

    @TaskAction
    void generateAssets() {
        def cssMiddleman = Files.createTempDirectory("yt-mp3-css-middleman").toFile()
        project.exec {
            executable 'sass'
            args '--scss', '--sourcemap=none', '--update', "$sourceDir:$cssMiddleman"
        }
        project.exec {
            executable project.file("./node_modules/postcss-cli/bin/postcss")
            args = ['--use', 'autoprefixer', '--dir', destinationDir] + project.fileTree(cssMiddleman).files
        }
    }
}
